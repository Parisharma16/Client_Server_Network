//
// Generated file, do not edit! Created by opp_msgtool 6.1 from message.msg.
//

#ifndef __MESSAGE_M_H
#define __MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class SubtaskRequest;
class SubtaskReply;
class GossipMessage;
/**
 * Class generated from <tt>message.msg:20</tt> by opp_msgtool.
 * <pre>
 * message SubtaskRequest
 * {
 *     int subtaskID;
 *     string subtaskArr;
 *     int serverID;
 *     bool isMalicious;
 * }
 * </pre>
 */
class SubtaskRequest : public ::omnetpp::cMessage
{
  protected:
    int subtaskID = 0;
    omnetpp::opp_string subtaskArr;
    int serverID = 0;
    bool isMalicious_ = false;

  private:
    void copy(const SubtaskRequest& other);

  protected:
    bool operator==(const SubtaskRequest&) = delete;

  public:
    SubtaskRequest(const char *name=nullptr, short kind=0);
    SubtaskRequest(const SubtaskRequest& other);
    virtual ~SubtaskRequest();
    SubtaskRequest& operator=(const SubtaskRequest& other);
    virtual SubtaskRequest *dup() const override {return new SubtaskRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSubtaskID() const;
    virtual void setSubtaskID(int subtaskID);

    virtual const char * getSubtaskArr() const;
    virtual void setSubtaskArr(const char * subtaskArr);

    virtual int getServerID() const;
    virtual void setServerID(int serverID);

    virtual bool isMalicious() const;
    virtual void setIsMalicious(bool isMalicious);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SubtaskRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SubtaskRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message.msg:27</tt> by opp_msgtool.
 * <pre>
 * message SubtaskReply
 * {
 *     int subtaskID;
 *     int result;
 *     int serverID;
 * }
 * </pre>
 */
class SubtaskReply : public ::omnetpp::cMessage
{
  protected:
    int subtaskID = 0;
    int result = 0;
    int serverID = 0;

  private:
    void copy(const SubtaskReply& other);

  protected:
    bool operator==(const SubtaskReply&) = delete;

  public:
    SubtaskReply(const char *name=nullptr, short kind=0);
    SubtaskReply(const SubtaskReply& other);
    virtual ~SubtaskReply();
    SubtaskReply& operator=(const SubtaskReply& other);
    virtual SubtaskReply *dup() const override {return new SubtaskReply(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSubtaskID() const;
    virtual void setSubtaskID(int subtaskID);

    virtual int getResult() const;
    virtual void setResult(int result);

    virtual int getServerID() const;
    virtual void setServerID(int serverID);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SubtaskReply& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SubtaskReply& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message.msg:33</tt> by opp_msgtool.
 * <pre>
 * message GossipMessage
 * {
 *     string content;
 * }
 * </pre>
 */
class GossipMessage : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string content;

  private:
    void copy(const GossipMessage& other);

  protected:
    bool operator==(const GossipMessage&) = delete;

  public:
    GossipMessage(const char *name=nullptr, short kind=0);
    GossipMessage(const GossipMessage& other);
    virtual ~GossipMessage();
    GossipMessage& operator=(const GossipMessage& other);
    virtual GossipMessage *dup() const override {return new GossipMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getContent() const;
    virtual void setContent(const char * content);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GossipMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GossipMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline SubtaskRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<SubtaskRequest*>(ptr.get<cObject>()); }
template<> inline SubtaskReply *fromAnyPtr(any_ptr ptr) { return check_and_cast<SubtaskReply*>(ptr.get<cObject>()); }
template<> inline GossipMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<GossipMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MESSAGE_M_H

